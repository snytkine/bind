"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
const settings_1 = require("./settings");
const index_1 = require("../../index");
const index_2 = require("../../decorators/index");
let Logger = class Logger {
  constructor(settings, mysettings) {
    this.log = (...messages) => {
      const message = messages.reduce((prev, curr) => prev + " " + curr, "");
      console.log(`${this.settings_.logLevel} - ${message} !`);
    };
    this.settings_ = settings;
  }
  set service(s) {
    this.service_ = s;
  }
};
Logger = __decorate([
  index_1.Component("mylogger"),
  __metadata("design:paramtypes", [settings_1.Settings, settings_1.Settings])
], Logger);
exports.Logger = Logger;
let LoggerFactory = class LoggerFactory {
  constructor(logger_) {
    this.logger_ = logger_;
  }
  initme() {
    return Promise.resolve(true);
  }
};
__decorate([
  index_2.PostConstruct,
  __metadata("design:type", Function),
  __metadata("design:paramtypes", []),
  __metadata("design:returntype", Promise)
], LoggerFactory.prototype, "initme", null);
LoggerFactory = __decorate([
  index_1.Component,
  __param(0, index_1.Inject),
  __metadata("design:paramtypes", [Logger])
], LoggerFactory);
exports.LoggerFactory = LoggerFactory;
